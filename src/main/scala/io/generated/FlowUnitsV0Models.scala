/**
 * Generated by API Builder - https://www.apibuilder.io
 * Service version: 0.19.67
 * User agent: apibuilder app.apibuilder.io/flow/units/latest/scala_models
 */
package io.flow.units.v0.models {

  sealed trait UnitOfLength extends _root_.scala.Product with _root_.scala.Serializable

  object UnitOfLength {

    /**
     * Equivalent to MILLI(METRE).
     */
    case object Millimeter extends UnitOfLength {
      override def toString = "millimeter"
    }
    /**
     * Equivalent to CENTI(METRE).
     */
    case object Centimeter extends UnitOfLength {
      override def toString = "centimeter"
    }
    /**
     * A unit of length equal to 0.0254 m (standard name in).
     */
    case object Inch extends UnitOfLength {
      override def toString = "inch"
    }
    /**
     * A unit of length equal to 0.3048 m (standard name ft).
     */
    case object Foot extends UnitOfLength {
      override def toString = "foot"
    }
    /**
     * The base unit for length quantities (m).
     */
    case object Meter extends UnitOfLength {
      override def toString = "meter"
    }
    /**
     * UNDEFINED captures values that are sent either in error or
     * that were added by the server after this library was
     * generated. We want to make it easy and obvious for users of
     * this library to handle this case gracefully.
     *
     * We use all CAPS for the variable name to avoid collisions
     * with the camel cased values above.
     */
    final case class UNDEFINED(override val toString: String) extends UnitOfLength

    /**
     * all returns a list of all the valid, known values. We use
     * lower case to avoid collisions with the camel cased values
     * above.
     */
    val all: scala.List[UnitOfLength] = scala.List(Millimeter, Centimeter, Inch, Foot, Meter)

    private
    val byName: Map[String, UnitOfLength] = all.map(x => x.toString.toLowerCase -> x).toMap

    def apply(value: String): UnitOfLength = fromString(value).getOrElse(UNDEFINED(value))

    def fromString(value: String): _root_.scala.Option[UnitOfLength] = byName.get(value.toLowerCase)

  }

  sealed trait UnitOfVolume extends _root_.scala.Product with _root_.scala.Serializable

  object UnitOfVolume {

    /**
     * A unit of volume equal to one cubic inch (in³).
     */
    case object CubicInch extends UnitOfVolume {
      override def toString = "cubic_inch"
    }
    /**
     * A unit of volume equal to one cubic foot (ft³).
     */
    case object CubicFoot extends UnitOfVolume {
      override def toString = "cubic_foot"
    }
    /**
     * A unit of volume equal to one cubic millimeter (mm³).
     */
    case object CubicMillimeter extends UnitOfVolume {
      override def toString = "cubic_millimeter"
    }
    /**
     * A unit of volume equal to one cubic centimeter (cm³).
     */
    case object CubicCentimeter extends UnitOfVolume {
      override def toString = "cubic_centimeter"
    }
    /**
     * The metric unit for volume quantities (m³).
     */
    case object CubicMeter extends UnitOfVolume {
      override def toString = "cubic_meter"
    }
    /**
     * UNDEFINED captures values that are sent either in error or
     * that were added by the server after this library was
     * generated. We want to make it easy and obvious for users of
     * this library to handle this case gracefully.
     *
     * We use all CAPS for the variable name to avoid collisions
     * with the camel cased values above.
     */
    final case class UNDEFINED(override val toString: String) extends UnitOfVolume

    /**
     * all returns a list of all the valid, known values. We use
     * lower case to avoid collisions with the camel cased values
     * above.
     */
    val all: scala.List[UnitOfVolume] = scala.List(CubicInch, CubicFoot, CubicMillimeter, CubicCentimeter, CubicMeter)

    private
    val byName: Map[String, UnitOfVolume] = all.map(x => x.toString.toLowerCase -> x).toMap

    def apply(value: String): UnitOfVolume = fromString(value).getOrElse(UNDEFINED(value))

    def fromString(value: String): _root_.scala.Option[UnitOfVolume] = byName.get(value.toLowerCase)

  }

  sealed trait UnitOfWeight extends _root_.scala.Product with _root_.scala.Serializable

  object UnitOfWeight {

    /**
     * A unit of mass equal to 1 / 1000 kilogram (standard name g).
     */
    case object Gram extends UnitOfWeight {
      override def toString = "gram"
    }
    /**
     * The base unit for mass quantities (kg).
     */
    case object Kilogram extends UnitOfWeight {
      override def toString = "kilogram"
    }
    /**
     * A unit of mass equal to 1 / 16 POUND (standard name oz).
     */
    case object Ounce extends UnitOfWeight {
      override def toString = "ounce"
    }
    /**
     * A unit of mass equal to 453.59237 grams (avoirdupois pound, standard name lb).
     */
    case object Pound extends UnitOfWeight {
      override def toString = "pound"
    }
    /**
     * UNDEFINED captures values that are sent either in error or
     * that were added by the server after this library was
     * generated. We want to make it easy and obvious for users of
     * this library to handle this case gracefully.
     *
     * We use all CAPS for the variable name to avoid collisions
     * with the camel cased values above.
     */
    final case class UNDEFINED(override val toString: String) extends UnitOfWeight

    /**
     * all returns a list of all the valid, known values. We use
     * lower case to avoid collisions with the camel cased values
     * above.
     */
    val all: scala.List[UnitOfWeight] = scala.List(Gram, Kilogram, Ounce, Pound)

    private
    val byName: Map[String, UnitOfWeight] = all.map(x => x.toString.toLowerCase -> x).toMap

    def apply(value: String): UnitOfWeight = fromString(value).getOrElse(UNDEFINED(value))

    def fromString(value: String): _root_.scala.Option[UnitOfWeight] = byName.get(value.toLowerCase)

  }

}